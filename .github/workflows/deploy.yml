name: deploy

on:
  push:
    branches:
      - master
      - develop

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  environment-set:
    outputs:
      branch: ${{ steps.extract-branch.outputs.branch }}
      environment-key: ${{ steps.setup-env.outputs.environment-key }}
      runner-label: ${{ steps.setup-label.outputs.runner-label }}
    name: environment-set
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract-branch

      - name: Set environment name
        id: setup-env
        run: |
          echo environment-key=${{ steps.extract-branch.outputs.branch == 'master' && 'Production' || 'Staging' }} >> "$GITHUB_OUTPUT"

      - name: Set runner label
        id: setup-label
        run: |
          echo runner-label=${{ steps.extract-branch.outputs.branch == 'master' && 'asap-prod-ban-machine-vm' || 'asap-stg-ban-machine-vm' }} >> "$GITHUB_OUTPUT"

  docker-build-and-upload:
    needs: environment-set
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

  deploy:
    needs: [ environment-set, docker-build-and-upload ]
    runs-on: [ self-hosted, Linux, X64, "${{ needs.environment-set.outputs.runner-label }}" ]
    environment: ${{ needs.environment-set.outputs.environment-key }}
    steps:
      - name: install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          arch: amd64
          
      - name: configure AWS
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.YC_OBJECT_STORAGE_BAN_MACHINE_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.YC_OBJECT_STORAGE_BAN_MACHINE_KEY }}
          
      - name: download .whl file
        run: |
          rm -rf bucket
          mkdir bucket

          aws s3 cp \
            --endpoint-url=https://storage.yandexcloud.net \
            --recursive \
            s3://${{ secrets.YC_OBJECT_STORAGE_BAN_MACHINE_BUCKET }} \
            bucket

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: pull image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.environment-set.outputs.branch }}
          
      - name: stop container
        run: |
          docker stop asap-ban-machine || true && docker rm asap-ban-machine || true

      - name: start container
        run: |
          docker run \
            --name asap-ban-machine \
            -p 8070:8070 \
            -e ASPNETCORE_ENVIRONMENT=${{ needs.environment-set.outputs.environment-key }} \
            -e Platform__YandexCloud__ServiceUri=${{ secrets.YANDEX_SERVICE_URI }} \
            -e Platform__YandexCloud__LockBox__SecretId=${{ secrets.YANDEX_SECRET_ID }} \
            -d \
            -t \
            -v /home/asap-admin/pip-cache:/root/.cache/pip \
            -v /home/asap-admin/hugging-face-cache:/root/.cache/hugging-face \
            -v bucket:/packages
            -v 
            -v /var/log/Serilogs/asap-ban-machine:/app/Serilogs/asap-ban-machine \
            --restart=unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.environment-set.outputs.branch }}
